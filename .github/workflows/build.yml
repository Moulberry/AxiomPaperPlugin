name: Build and Release
on:
  push:
    branches: [ "**" ]
  pull_request:

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 17 ]
      fail-fast: true
    steps:
      - uses: actions/checkout@v3
      - name: JDK ${{ matrix.java }}
        uses: actions/setup-java@v3.6.0
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Build
        run: ./gradlew build
      - name: Extract Version Name
        id: extract_version
        # Janky way of getting the version without having to complicate things (there's probably a better way)
        run: |
          JAR_FILE=$(ls build/libs/AxiomPaper-*.jar)
          VERSION=${JAR_FILE##*-}
          VERSION=${VERSION%.jar}
          echo "$VERSION"
          echo "::set-output name=version::$VERSION"
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version.outputs.version }}
          release_name: Release ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Get Recent Release
        id: check_assets
        # Get most recent release and jar with the same version from extract_version
        run: |
          ASSETS_URL="https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets"
          ASSET_RESPONSE=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -s $ASSETS_URL)
          echo "$ASSET_RESPONSE" | jq -c '.[] | select(.name == "AxiomPaper-${{ steps.extract_version.outputs.version }}.jar")' || echo "[]"
          echo "::set-output name=assets::$ASSET_RESPONSE"
      - name: Override Previous Release
        # Remove JAR from most recent release if the current build version matches, allowing upload_jar to function
        id: delete_asset
        run: |
          ASSET_ID=$(echo "${{ steps.check_assets.outputs.assets }}" | jq -r '.[0].id')
          if [ "$ASSET_ID" != "null" ]; then
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID"
          fi

      - name: Upload JAR
        id: upload_jar
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/libs/AxiomPaper-${{ steps.extract_version.outputs.version }}.jar
          asset_name: AxiomPaper-${{ steps.extract_version.outputs.version }}.jar
          asset_content_type: application/java-archive
